要件定義書: |
  1. システム概要
  本システムは、チームメンバー（10名）の出勤管理・スケジュール管理を主目的としたWebアプリケーションである。
  スケジュールは個人用カレンダーとチーム全体カレンダーを切り替えて利用でき、タスク管理やプロジェクト管理、勤怠管理などを行う。
  また、Google Sheets API によるスプレッドシートからのインポートや、Google カレンダーへのエクスポートにも対応し、より効率的な運用を実現する。

  2. ユーザー・権限
  - 管理者（1名：依頼者本人）
    - スプレッドシートのインポート操作が可能（手動実行）
    - メンバー管理（追加・編集など）が可能
    - プロジェクトの追加・管理が可能
  - チームメンバー（10名）
    - カレンダーの予定や勤怠を登録・閲覧
    - タスクやプロジェクトを閲覧・登録・編集
    - 連携ボタンから自分のスケジュールを Google カレンダーにエクスポート
  - 将来的にサブ管理者の追加予定はない想定。
  - 権限は「管理者」と「一般メンバー」の2種類のみ。

  3. 優先実装機能
  - カレンダー機能
  - スプレッドシート（Google Sheets）からのインポート
    - 毎日0時の自動取得
    - 管理者が手動で実行できるインポートボタン
  - Google カレンダーへのエクスポート（連携）
    - 個人のスケジュールをエクスポート
    - 手動で再度エクスポートできる
  - 管理画面

  4. 機能要件
  4.1 カレンダー
  4.1.1 概要
  **「個人用カレンダー」と「全体用カレンダー」**を切り替え表示。
  - 個人用: ログインユーザーのみの予定・勤怠・タスク
  - 全体用: チーム全員の予定・勤怠・タスク

  4.1.2 表示内容
  - 各日付ごとに下記を表示:
    - 出勤予定（インポート or ユーザー直接入力）
    - 勤怠情報（実績）
    - タスク
  - 日付をクリック/ホバーすると、詳細をモーダルまたはツールチップで表示。

  4.1.3 入力フォーム (Google カレンダーライク)
  - カレンダー上で日付セルをクリックするとモーダルが開き、以下を入力できる:
    - 予定名
    - 日時（開始、終了）
    - 出勤形態（テレワーク or 出勤）など
    - 勤怠打刻（出勤/退勤/休憩入り/休憩終わり）
    - タスク情報（紐づくプロジェクト・タグなど）
  - 休憩は複数回に対応できるデータ構造を検討。

  4.2 タスク管理
  4.2.1 概要
  - タスクは「タスク管理画面」または「カレンダー上の入力フォーム」から作成可能。
  - 登録時の主な情報:
    - タスク名
    - 紐づく ユーザーID（誰が担当するか）
    - 紐づく プロジェクトID（任意で選択）
    - タグ（ドロップダウン or テキスト入力）
    - 目標日付（期限）
    - 詳細説明
  - 作成したタスクはメインカレンダーに表示可能。

  4.2.2 完了タスク
  - 完了ステータスになったタスクは、プロジェクト詳細画面などで確認できる。

  4.3 プロジェクト管理
  4.3.1 概要
  **プロジェクトはタスクの“親”**としての概念。
  - プロジェクト管理画面で以下を行う:
    - プロジェクトの新規作成（プロジェクト名、タグ、詳細 など）
    - 参加メンバーの指定
      - 複数メンバーを紐づけるため、プロジェクト–ユーザーの中間テーブルを用意
    - プロジェクト検索（プロジェクト名、タグ）

  4.3.2 将来拡張
  - プロジェクト単位で週報ページを作成する想定。

  4.4 勤怠管理
  4.4.1 概要
  - 出勤予定（事前申告）と実績（出勤/退勤/休憩など）を管理。
  - 入力は自分で時間帯を選択する手動形式。
  - 休憩複数回にも対応できるようにする。

  4.4.2 カレンダーとの連携
  - 勤怠情報はカレンダーに表示し、ユーザーが編集可能。

  4.5 連携機能 (Google カレンダーエクスポート)
  4.5.1 概要
  - ログイン中のメンバーが「連携ボタン」を押すと、自分の Google カレンダーへ「わどチーム」という新カレンダーを作り、20日分の予定をエクスポート。
  - 変更があった場合、再度ボタンを押して更新する想定。
  - 逆方向（Google カレンダー → アプリ）への取り込みは不要。

  4.6 管理画面
  4.6.1 概要
  - 管理者のみアクセス可能。
  - スプレッドシートインポート機能:
    - 毎日0時に自動取得
    - 手動実行ボタンあり
    - 全メンバー分の予定データを取得しDBに反映
  - メンバー管理、プロジェクト管理なども必要に応じて行う。

  5. データベース設計
  5.1 認証・ユーザー情報
  - 認証: Supabase Auth + Google OAuth
  - ログイン方法: アプリログイン画面で Google 認証
  - ユーザー判別: google_sub で一意に管理

  5.1.1 メンバーテーブル（例）
  - フィールド例:
    - id (UUID(PK)): Supabase で発行されるユーザーID
    - google_sub (Text): Google の認証情報から取得した sub
    - sheet_name (Text): スプレッドシート上で判別する名前
    - name (Text): アプリ上で表示するユーザー名
    - email (Text): 認証時に取得するメールアドレス
    - role (Text): 'admin' or 'member'
    - created_at (Timestamp)
    - updated_at (Timestamp)

  5.2 カレンダーテーブル（例）
  - スプレッドシートからのインポート情報および、ユーザーが直接追加した予定を管理。
  - インポート時には sheet_name からユーザーを特定し、user_id を紐づけてレコード作成。
  - フィールド例:
    - id (UUID(PK)): イベントID
    - user_id (UUID): メンバーの id と紐づく
    - title (Text): 予定名（例：出勤、テレワークなど）
    - start_time (Timestamp): 開始日時
    - end_time (Timestamp): 終了日時
    - work_type (Text): '出勤' or 'テレワーク' など
    - created_at (Timestamp)
    - updated_at (Timestamp)

  5.3 勤怠テーブル（例）
  - 実際の打刻（出勤/退勤/休憩入り/休憩終わり）を管理。
  - 1日に複数回の休憩が想定されるため、JSON や別テーブルで管理を検討。
  - フィールド例:
    - id (UUID(PK)): 勤怠レコードID
    - user_id (UUID): メンバーテーブル id と紐づく
    - date (Date): 日付
    - attendance_log (JSONB): 出勤/退勤/休憩入り/休憩終わりなど複数回に対応する配列等
    - created_at (Timestamp)
    - updated_at (Timestamp)

  5.4 タスクテーブル（例）
  - 誰のタスクかを明確にするため、user_id を設ける。
  - フィールド例:
    - id (UUID(PK)): タスクID
    - user_id (UUID): タスクのメイン担当ユーザーID
    - title (Text): タスク名
    - project_id (UUID): プロジェクトの id と紐づく (任意)
    - tag (Text): タグ。複数対応なら別テーブル or JSONB 検討
    - due_date (Date): 目標日付
    - detail (Text): タスクの詳細
    - status (Text): 'open' / 'done' など
    - created_at (Timestamp)
    - updated_at (Timestamp)

  5.5 プロジェクトテーブル & プロジェクトメンバー管理
  5.5.1 プロジェクトテーブル
  - フィールド例:
    - id (UUID(PK)): プロジェクトID
    - name (Text): プロジェクト名
    - tag (Text): プロジェクト用タグ
    - detail (Text): プロジェクトの詳細
    - created_at (Timestamp)
    - updated_at (Timestamp)

  5.5.2 プロジェクト-メンバー中間テーブル
  - 複数メンバーが1つのプロジェクトに参加する場合を想定。
  - フィールド例:
    - id (UUID(PK)): 中間テーブルのID
    - project_id (UUID): プロジェクトテーブルの id と紐づく
    - user_id (UUID): メンバーテーブルの id と紐づく
    - created_at (Timestamp)
    - updated_at (Timestamp)
  - プロジェクト管理画面で参加メンバーを指定した際、このテーブルにレコードを追加。

  6. 画面構成・UI/UX
  6.1 カレンダー画面
  - 個人 / 全体のタブ切り替え。
  - カレンダーの日付クリック → モーダル表示 → 「予定追加」or「勤怠入力」or「タスク入力」
  - 水色ベースのスタイリッシュなデザイン (Tailwind CSS 利用)

  6.2 タスク管理画面
  - タスク一覧: ステータス（open/done）でフィルタ可能
  - タスク追加フォーム: タスク名、担当者(user_id)、プロジェクト選択(project_id)、タグなど

  6.3 プロジェクト管理画面
  - プロジェクト一覧 + 検索機能(プロジェクト名・タグ)
  - プロジェクト作成フォーム: name, tag, detail
  - 参加メンバー管理: 複数メンバーを紐づけ可能

  6.4 管理画面
  - 管理者のみアクセス
  - スプレッドシート インポート（手動ボタン + 毎日0時自動）
  - メンバー情報の管理 (role の変更など)

  6.5 連携画面（Google カレンダーエクスポート）
  - 個人設定 or カレンダー画面に「連携ボタン」
  - ボタンクリックで 20日分の予定を Google カレンダーにエクスポート

  7. 非機能要件
  - 認証: Supabase Auth + Google OAuth
  - DB: Supabase (PostgreSQL)
  - ホスティング: Netlify (フロントエンド + Netlify Functions)
  - パフォーマンス: チーム10名規模で問題ない想定
  - セキュリティ: Google sub でユーザーを判定し、必要に応じてアクセス制御
  - 拡張性: プロジェクト毎の週報や通知機能など、今後追加しやすいテーブル設計

  8. 今後の拡張予定
  - 週報管理機能: プロジェクト単位で週報ページを追加
  - レスポンシブ対応: 今は優先度低いが、スマホ対応が必要になった場合に拡張
  - 通知機能: タスク期限通知や勤怠打刻漏れアラートなど
